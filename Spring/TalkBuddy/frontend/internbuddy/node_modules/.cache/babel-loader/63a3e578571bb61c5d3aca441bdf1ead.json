{"ast":null,"code":"import _objectSpread from \"/home/user/Assignments-Zemoso/Spring/TalkBuddy/frontend/internbuddy/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst initialState = {\n  taskList: [],\n  showList: [],\n  searchTerm: \"\",\n  visibility: 'ALL'\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case \"UPDATE_DATA\":\n      {\n        return _objectSpread({}, state, {\n          showList: action.payload,\n          taskList: action.payload\n        });\n      }\n\n    case \"CHANGE_SEARCH\":\n      {\n        if (state.visibility === 'ALL') {\n          return _objectSpread({}, state, {\n            showList: state.taskList.filter(value => value.task.taskName.toLowerCase().includes(action.payload)),\n            searchTerm: action.payload\n          });\n        } else {\n          return _objectSpread({}, state, {\n            showList: state.taskList.filter(value => value.status == state.visibility && value.task.taskName.toLowerCase().includes(action.payload)),\n            searchTerm: action.payload\n          });\n        }\n      }\n\n    case \"CHANGE_VISIBILITY_FILTER\":\n      {\n        if (action.payload === 'ALL') return _objectSpread({}, state, {\n          showList: state.taskList,\n          visibility: action.payload\n        });\n        return _objectSpread({}, state, {\n          visibility: action.payload,\n          showList: state.taskList.filter(value => value.status === action.payload)\n        });\n      }\n\n    case \"UPDATE_ASSIGNMENT_STATUS\":\n      {\n        const updatedList = [...state.taskList.slice(0, action.payload.id), {\n          id: state.taskList[action.payload.id].id,\n          status: action.payload.status,\n          task: state.taskList[action.payload.id].task\n        }, ...state.taskList.slice(action.payload.id + 1)];\n        return _objectSpread({}, state, {\n          taskList: updatedList,\n          showList: updatedList\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["/home/user/Assignments-Zemoso/Spring/TalkBuddy/frontend/internbuddy/src/reducers/assignmentReducer.js"],"names":["initialState","taskList","showList","searchTerm","visibility","state","action","type","payload","filter","value","task","taskName","toLowerCase","includes","status","updatedList","slice","id"],"mappings":";AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAC,EADQ;AAEjBC,EAAAA,QAAQ,EAAC,EAFQ;AAGjBC,EAAAA,UAAU,EAAE,EAHK;AAIjBC,EAAAA,UAAU,EAAC;AAJM,CAArB;AAOA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KACf;AACI,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAK,aAAL;AAAmB;AACf,iCACOF,KADP;AAEIH,UAAAA,QAAQ,EAACI,MAAM,CAACE,OAFpB;AAGIP,UAAAA,QAAQ,EAACK,MAAM,CAACE;AAHpB;AAKH;;AACD,SAAK,eAAL;AAAqB;AACjB,YAAGH,KAAK,CAACD,UAAN,KAAmB,KAAtB,EACA;AACI,mCACOC,KADP;AAEIH,YAAAA,QAAQ,EAACG,KAAK,CAACJ,QAAN,CAAeQ,MAAf,CAAsBC,KAAK,IAAEA,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAoBC,WAApB,GAAkCC,QAAlC,CAA2CR,MAAM,CAACE,OAAlD,CAA7B,CAFb;AAGIL,YAAAA,UAAU,EAAEG,MAAM,CAACE;AAHvB;AAKH,SAPD,MASA;AACI,mCACOH,KADP;AAEIH,YAAAA,QAAQ,EAACG,KAAK,CAACJ,QAAN,CAAeQ,MAAf,CAAsBC,KAAK,IAAEA,KAAK,CAACK,MAAN,IAAcV,KAAK,CAACD,UAApB,IAAkCM,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAoBC,WAApB,GAAkCC,QAAlC,CAA2CR,MAAM,CAACE,OAAlD,CAA/D,CAFb;AAGIL,YAAAA,UAAU,EAAEG,MAAM,CAACE;AAHvB;AAKH;AAEJ;;AACD,SAAK,0BAAL;AACI;AACI,YAAGF,MAAM,CAACE,OAAP,KAAiB,KAApB,EACI,yBACOH,KADP;AAEIH,UAAAA,QAAQ,EAACG,KAAK,CAACJ,QAFnB;AAGIG,UAAAA,UAAU,EAACE,MAAM,CAACE;AAHtB;AAKJ,iCACOH,KADP;AAEID,UAAAA,UAAU,EAACE,MAAM,CAACE,OAFtB;AAGIN,UAAAA,QAAQ,EAACG,KAAK,CAACJ,QAAN,CAAeQ,MAAf,CAAsBC,KAAK,IAAEA,KAAK,CAACK,MAAN,KAAeT,MAAM,CAACE,OAAnD;AAHb;AAKH;;AACL,SAAK,0BAAL;AACI;AACI,cAAMQ,WAAW,GAAG,CAAC,GAAGX,KAAK,CAACJ,QAAN,CAAegB,KAAf,CAAqB,CAArB,EAAuBX,MAAM,CAACE,OAAP,CAAeU,EAAtC,CAAJ,EAChB;AACCA,UAAAA,EAAE,EAACb,KAAK,CAACJ,QAAN,CAAeK,MAAM,CAACE,OAAP,CAAeU,EAA9B,EAAkCA,EADtC;AAECH,UAAAA,MAAM,EAACT,MAAM,CAACE,OAAP,CAAeO,MAFvB;AAGCJ,UAAAA,IAAI,EAACN,KAAK,CAACJ,QAAN,CAAeK,MAAM,CAACE,OAAP,CAAeU,EAA9B,EAAkCP;AAHxC,SADgB,EAMf,GAAGN,KAAK,CAACJ,QAAN,CAAegB,KAAf,CAAqBX,MAAM,CAACE,OAAP,CAAeU,EAAf,GAAkB,CAAvC,CANY,CAApB;AAOA,iCACOb,KADP;AAEIJ,UAAAA,QAAQ,EAAEe,WAFd;AAGId,UAAAA,QAAQ,EAAEc;AAHd;AAKH;;AACL;AAAQ;AACJ,iCAAWX,KAAX;AACH;AA3DL;AA6DH,CA/DD","sourcesContent":["const initialState = {\n    taskList:[],\n    showList:[],\n    searchTerm: \"\",\n    visibility:'ALL'\n}\n\nexport default (state = initialState, action) =>\n{\n    switch(action.type)\n    {\n        case \"UPDATE_DATA\":{\n            return {\n                ...state,\n                showList:action.payload,\n                taskList:action.payload,\n            };\n        }\n        case \"CHANGE_SEARCH\":{\n            if(state.visibility==='ALL')\n            {\n                return {\n                    ...state,\n                    showList:state.taskList.filter(value=>value.task.taskName.toLowerCase().includes(action.payload)),\n                    searchTerm: action.payload\n                };\n            }\n            else\n            {\n                return {\n                    ...state,\n                    showList:state.taskList.filter(value=>value.status==state.visibility && value.task.taskName.toLowerCase().includes(action.payload)),\n                    searchTerm: action.payload\n                }\n            }\n            \n        }\n        case \"CHANGE_VISIBILITY_FILTER\":\n            {\n                if(action.payload==='ALL')\n                    return{\n                        ...state,\n                        showList:state.taskList,\n                        visibility:action.payload\n                    }\n                return {\n                    ...state,\n                    visibility:action.payload,\n                    showList:state.taskList.filter(value=>value.status===action.payload)\n                }\n            }\n        case \"UPDATE_ASSIGNMENT_STATUS\":\n            {\n                const updatedList = [...state.taskList.slice(0,action.payload.id),\n                    {\n                     id:state.taskList[action.payload.id].id,\n                     status:action.payload.status,\n                     task:state.taskList[action.payload.id].task\n                    }\n                    ,...state.taskList.slice(action.payload.id+1)]\n                return{\n                    ...state,\n                    taskList: updatedList,\n                    showList: updatedList\n                }\n            }\n        default:{\n            return {...state};\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}